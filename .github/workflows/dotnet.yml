# This workflow will build a .NET project
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-net

name: .NET CI/CD

on:
    push:
        branches: ['master', 'main']
        tags: ['v*']
    pull_request:
        branches: ['master', 'main']

jobs:
    build:
        runs-on: ubuntu-latest

        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Setup .NET
              uses: actions/setup-dotnet@v4
              with:
                  dotnet-version: 8.0.x

            - name: Cache NuGet packages
              uses: actions/cache@v3
              with:
                  path: ~/.nuget/packages
                  key: ${{ runner.os }}-nuget-${{ hashFiles('**/*.csproj', '**/*.sln') }}
                  restore-keys: |
                      ${{ runner.os }}-nuget-

            - name: Restore dependencies
              run: dotnet restore

            - name: Build
              run: dotnet build --no-restore --configuration Release

            - name: Test
              run: dotnet test --no-build --verbosity normal --configuration Release

            - name: Publish Ape.Volo.Api
              run: dotnet publish Ape.Volo.Api/Ape.Volo.Api.csproj --no-build --configuration Release --output ./publish/Ape.Volo.Api

            - name: Upload build artifacts
              uses: actions/upload-artifact@v4
              with:
                  name: published-files
                  path: ./publish

    deploy-docker:
        needs: build
        runs-on: ubuntu-latest
        if: ${{ !startsWith(github.ref, 'refs/tags/') }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: published-files
                  path: ./publish

            - name: Copy Dockerfile to publish directory
              run: cp Ape.Volo.Api/Dockerfile.CI ./publish/Ape.Volo.Api/Dockerfile.CI

            - name: Build Docker image
              run: docker build -t apevolo-api:latest -f ./publish/Ape.Volo.Api/Dockerfile.CI ./publish/Ape.Volo.Api

            - name: Add SSH key
              uses: webfactory/ssh-agent@v0.9.1
              with:
                  ssh-private-key: ${{ secrets.SSH_PRIVATE_KEY }}

            - name: Add server to known_hosts
              run: |
                  mkdir -p ~/.ssh
                  echo "${{ secrets.KNOWN_HOSTS }}" > ~/.ssh/known_hosts
                  chmod 600 ~/.ssh/known_hosts

            - name: Deploy to server
              run: |
                  docker save apevolo-api:latest | ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker load"
                  ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker stop apevolo-api || true && docker rm apevolo-api || true"
                  ssh ${{ secrets.SERVER_USER }}@${{ secrets.SERVER_IP }} "docker run -d -p 8002:8002 \
                  --name apevolo-api apevolo-api:latest"

    create-release:
        needs: build
        runs-on: ubuntu-latest
        if: ${{ startsWith(github.ref, 'refs/tags/v') }}
        steps:
            - name: Checkout code
              uses: actions/checkout@v4
              with:
                  fetch-depth: 0

            - name: Download build artifacts
              uses: actions/download-artifact@v4
              with:
                  name: published-files
                  path: ./publish

            - name: Archive release assets
              run: |
                  cd publish
                  zip -r release_artifacts.zip .
                  mv release_artifacts.zip ../

            - name: Generate release notes
              id: generate_notes
              shell: bash
              run: |
                  # 尝试获取上一个 tag，如果不存在则只获取当前 tag 的日志
                  if git rev-parse "${GITHUB_REF_NAME}^" >/dev/null 2>&1 && git describe --tags --abbrev=0 "${GITHUB_REF_NAME}^" >/dev/null 2>&1; then
                    PREV_TAG=$(git describe --tags --abbrev=0 "${GITHUB_REF_NAME}^")
                    LOG=$(git log "$PREV_TAG".."${GITHUB_REF_NAME}" --pretty=format:"- %s")
                  else
                    LOG=$(git log "${GITHUB_REF_NAME}" --pretty=format:"- %s")
                  fi
                  # 将日志写入步骤输出 notes
                  printf 'notes<<EOF
                  ## Changelog
                  %s
                  EOF
                  ' "$LOG" >> $GITHUB_OUTPUT

            - name: Create GitHub Release
              id: create_release
              uses: actions/create-release@v1
              with:
                  tag_name: ${{ github.ref_name }}
                  release_name: Release ${{ github.ref_name }}
                  body: ${{ steps.generate_notes.outputs.notes }}
                  draft: false
                  prerelease: false
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

            - name: Upload release asset
              uses: actions/upload-release-asset@v1
              env:
                  GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              with:
                  upload_url: ${{ steps.create_release.outputs.upload_url }}
                  asset_path: ./release_artifacts.zip
                  asset_name: Release_Binaries_${{ github.ref_name }}.zip
                  asset_content_type: application/zip
